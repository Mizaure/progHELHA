    Pour les classes abstraites => écriture italique -> si à la main: Forme {abstract}
    Pour les méthodes abstraites -> e.g. : +CalculPerim() {abstract} : Double

    Relation transitive dans héritage :
        => se porte sur les attributs, méthodes et associations
        => Si la classe mère a une association avec une autre classe, toutes ses classes filles ont aussi la meme association vers cette meme autre classe
        => Une classe ne peut pas hériter d'elle-meme 
        => Relation non symétrique : si une classe hérite d'une autre alors celle-ci ne peut pas hériter de la première

    Contraintes d'intégrité :
        -> Règles qui permettent de garantir la cohérence des données lors de leur mise à jour par rapport au monde réel

        => Ces règles sont indiquées dans l'UML (technique à utiliser quand possible) ou avec une note en français
        => Sur les attributs :
            - Types de données => entier, réel, boolean, date, string, etc.
            - Domaines de valeurs => Limitation minimale et maximale d'une valeur 
            - Obligatoires ou facultatifs => [0..1] == facultatif
            - Attributs liés => 
        => Sur les associations :
            - Multiplicités => Contraintes d'existence (si multiplicité minimale = 1)
            - Inclusion => Association incluse dans une autre quand un lien qui appartient à l'une appartient aussi à l'autre (e.g. : Directeur d'un département est aussi employé)
            - Exclusion => (e.g. un véhicule n'a qu'un propriétaire: une persone ou une entreprise (=> XOR). Quand le propriétaire est une personne physique, il est aussi chauffeur principal du véhicule)

3. Diagramme de packages

    Diagramme de packages en UML :
        => Dessiner un graphique et mettre le nom dedans (gestion du catalogue, ...)
        => Un lien indique une "dépendance" : une modification d'un package peut entrainer une modification dans l'autre package (car classes en commun)

4. Diagramme de Use Case(s) => cas d'utilisation

    


